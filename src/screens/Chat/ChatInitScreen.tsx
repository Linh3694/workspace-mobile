import React, { useEffect } from 'react';
// @ts-ignore
import { View, ActivityIndicator, Text } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../navigation/AppNavigator';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BASE_URL } from '../../config/constants';
import { ROUTES } from '../../constants/routes';

type Props = NativeStackScreenProps<RootStackParamList, 'ChatInit'>;

const ChatInitScreen = ({ route, navigation }: Props) => {
  const { chatId, senderId } = route.params;

  console.log('üöÄ [ChatInit] Screen loaded with params:', {
    chatId,
    senderId,
    routeParams: route.params,
  });

  useEffect(() => {
    const fetchUserAndNavigate = async () => {
      try {
        // Validate params tr∆∞·ªõc khi ti·∫øp t·ª•c
        if (!senderId || senderId === 'undefined' || typeof senderId !== 'string') {
          console.error('‚ùå [ChatInit] Invalid senderId:', senderId);
          // Quay v·ªÅ m√†n h√¨nh ch√≠nh n·∫øu senderId invalid
          navigation.replace('Main', {});
          return;
        }

        // Hi·ªÉn th·ªã loading
        const token = await AsyncStorage.getItem('authToken');
        if (!token) {
          // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
          navigation.reset({
            index: 0,
            routes: [{ name: ROUTES.AUTH.LOGIN }],
          });
          return;
        }

        console.log('üîó [ChatInit] Fetching user:', senderId);

        // G·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        const response = await fetch(`${BASE_URL}/api/users/${senderId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (response.ok) {
          const userData = await response.json();
          console.log(
            '‚úÖ [ChatInit] User data loaded:',
            userData?.fullname || userData?.email || 'Unknown'
          );
          // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh chat v·ªõi th√¥ng tin ng∆∞·ªùi d√πng v√† chat
          navigation.replace('ChatDetail', {
            chatId,
            user: userData,
          });
        } else {
          console.error('‚ùå [ChatInit] User API error:', response.status, response.statusText);
          const errorText = await response.text().catch(() => 'Unknown error');
          console.error('‚ùå [ChatInit] Error response:', errorText);

          // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng, quay v·ªÅ m√†n h√¨nh ch√≠nh
          navigation.replace('Main', {});
        }
      } catch (error) {
        console.error('‚ùå [ChatInit] Exception:', error);
        // N·∫øu c√≥ l·ªói, quay v·ªÅ m√†n h√¨nh ch√≠nh
        navigation.replace('Main', {});
      }
    };

    fetchUserAndNavigate();
  }, [chatId, senderId, navigation]);

  return (
    <View
      style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff' }}>
      <ActivityIndicator size="large" color="#009483" />
      <Text style={{ marginTop: 16, color: '#666', fontFamily: 'Inter', fontWeight: 'medium' }}>
        {!senderId || senderId === 'undefined'
          ? 'Tham s·ªë kh√¥ng h·ª£p l·ªá...'
          : 'ƒêang t·∫£i cu·ªôc tr√≤ chuy·ªán...'}
      </Text>
    </View>
  );
};

export default ChatInitScreen;
