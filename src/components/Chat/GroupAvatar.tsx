import React, { useState } from 'react';
// @ts-ignore
import { View, Text, Image } from 'react-native';
import { MaterialIcons } from '@expo/vector-icons';
import type { User } from '../../types/message';
import { getAvatar } from '../../utils/avatar';
import { processImageUrl } from '../../utils/image';
import TicketIcon from '../../assets/ticket-icon.svg';

interface GroupAvatarProps {
  size: number;
  groupAvatar?: string;
  participants: User[];
  currentUserId?: string;
  style?: any;
}

const GroupAvatar: React.FC<GroupAvatarProps> = ({
  size,
  groupAvatar,
  participants,
  currentUserId,
  style
}) => {
  const [imageError, setImageError] = useState(false);

  // N·∫øu c√≥ group avatar v√† ch∆∞a c√≥ l·ªói, hi·ªÉn th·ªã n√≥
  if (groupAvatar && !imageError) {
    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho ticket-icon.svg
    if (groupAvatar === 'ticket-icon.svg') {
      return (
        <View 
          className="relative overflow-hidden items-center justify-center"
          style={[{ width: size, height: size }, style]}
        >
          <TicketIcon width={size} height={size} />
        </View>
      );
    }
    
    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho ticket.svg (n·∫øu c√≥)
    if (groupAvatar === 'ticket.svg') {
      return (
        <View 
          className="relative overflow-hidden items-center justify-center"
          style={[{ width: size, height: size }, style]}
        >
          <TicketIcon width={size} height={size} />
        </View>
      );
    }
    
    return (
      <View className="relative overflow-hidden" style={[{ width: size, height: size }, style]}>
        <Image
          source={{ uri: processImageUrl(groupAvatar) }}
          className="rounded-full"
          style={{ width: size, height: size, borderRadius: size / 2 }}
          resizeMode="cover"
          onError={(error) => {
            console.error('üñºÔ∏è [GroupAvatar] Group avatar load error:', error.nativeEvent.error);
            console.error('üñºÔ∏è [GroupAvatar] Attempted URL:', processImageUrl(groupAvatar));
            setImageError(true);
          }}
          onLoad={() => {
            console.log('üñºÔ∏è [GroupAvatar] Group avatar loaded successfully:', processImageUrl(groupAvatar));
            setImageError(false);
          }}
        />
      </View>
    );
  }

  // L·ªçc b·ªè current user v√† l·∫•y t·ªëi ƒëa 4 th√†nh vi√™n ƒë·∫ßu ti√™n
  const displayUsers = participants
    .slice(0, 4);

  // N·∫øu kh√¥ng c√≥ th√†nh vi√™n n√†o ƒë·ªÉ hi·ªÉn th·ªã, hi·ªÉn th·ªã icon m·∫∑c ƒë·ªãnh
  if (displayUsers.length === 0) {
    return (
      <View 
        className="relative overflow-hidden items-center justify-center bg-blue-100"
        style={[{ width: size, height: size, borderRadius: size / 2 }, style]}
      >
        <MaterialIcons name="group" size={size * 0.5} color="#007AFF" />
      </View>
    );
  }

  // T√≠nh to√°n layout d·ª±a tr√™n s·ªë l∆∞·ª£ng th√†nh vi√™n
  const renderUserAvatars = () => {
    const totalMembers = participants.length;
    const remainingCount = totalMembers - displayUsers.length;
    const avatarSize = size * 0.58; // K√≠ch th∆∞·ªõc avatar nh·ªè h∆°n m·ªôt ch√∫t

    if (displayUsers.length === 1) {
      // 1 th√†nh vi√™n: 1 ·∫£nh l·ªõn
      return (
        <UserAvatar user={displayUsers[0]} size={size} />
      );
    }

    if (displayUsers.length === 2) {
      // 2 th√†nh vi√™n: s·∫Øp x·∫øp ngang v·ªõi overlap, avatar ph·∫£i th·∫•p h∆°n
      return (
        <View className="flex-row items-start justify-center mt-1">
          <UserAvatar user={displayUsers[0]} size={avatarSize} />
          <View style={{ marginLeft: -avatarSize * 0.3, marginTop: avatarSize * 0.5 }}>
            <UserAvatar user={displayUsers[1]} size={avatarSize} />
          </View>
        </View>
      );
    }

    if (displayUsers.length === 3) {
      // 3 th√†nh vi√™n: 1 ·∫£nh tr√™n, 2 ·∫£nh d∆∞·ªõi (h√¨nh tam gi√°c)
      return (
        <View className="items-center">
          {/* Avatar tr√™n */}
          <UserAvatar user={displayUsers[0]} size={avatarSize} />
          {/* 2 Avatar d∆∞·ªõi */}
          <View className="flex-row" style={{ marginTop: -avatarSize * 0.2 }}>
            <UserAvatar user={displayUsers[1]} size={avatarSize} />
            <View style={{ marginLeft: -avatarSize * 0.3 }}>
              <UserAvatar user={displayUsers[2]} size={avatarSize} />
            </View>
          </View>
        </View>
      );
    }

    // 4+ th√†nh vi√™n: layout 2x2 (2 tr√™n 2 d∆∞·ªõi)
    return (
      <View className="items-center">
        {/* H√†ng tr√™n: 2 avatar */}
        <View className="flex-row">
          <UserAvatar user={displayUsers[0]} size={avatarSize} />
          <View style={{ marginLeft: -avatarSize * 0.3 }}>
            <UserAvatar user={displayUsers[1]} size={avatarSize} />
          </View>
        </View>
        {/* H√†ng d∆∞·ªõi: 2 avatar */}
        <View className="flex-row" style={{ marginTop: -avatarSize * 0.2 }}>
          <UserAvatar user={displayUsers[2]} size={avatarSize} />
          {remainingCount > 0 ? (
            <View 
              className="bg-gray-600 items-center justify-center border-2 border-white rounded-full"
              style={{ 
                width: avatarSize, 
                height: avatarSize, 
                marginLeft: -avatarSize * 0.3,
                zIndex: 10
              }}
            >
              <Text 
                className="text-white font-semibold"
                style={{ fontSize: avatarSize * 0.25 }}
              >
                +{remainingCount}
              </Text>
            </View>
          ) : (
            displayUsers[3] && (
              <View style={{ marginLeft: -avatarSize * 0.3 }}>
                <UserAvatar user={displayUsers[3]} size={avatarSize} />
              </View>
            )
          )}
        </View>
      </View>
    );
  };

  return (
    <View className="relative overflow-hidden" style={[{ height: size }, style]}>
      {renderUserAvatars()}
    </View>
  );
};

interface UserAvatarProps {
  user: User;
  size: number;
}

const UserAvatar: React.FC<UserAvatarProps> = ({ user, size }) => {
  return (
    <Image
      source={{ uri: getAvatar(user) }}
      style={{
        width: size,
        height: size,
        borderRadius: size / 2,
        borderWidth: 2,
        borderColor: '#fff',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 3,
        elevation: 3,
      }}
      resizeMode="cover"
    />
  );
};

export default GroupAvatar; 