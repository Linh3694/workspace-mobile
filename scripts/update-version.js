#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// H√†m ƒë·ªÉ c·∫≠p nh·∫≠t version trong app.json
const updateVersion = (versionType = 'patch', customVersion = null) => {
  const appJsonPath = path.join(process.cwd(), 'app.json');
  
  try {
    // ƒê·ªçc file app.json
    const appJson = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));
    const currentVersion = appJson.expo.version;
    
    console.log(`üì± Version hi·ªán t·∫°i: ${currentVersion}`);
    
    let newVersion;
    
    if (customVersion) {
      // S·ª≠ d·ª•ng version t√πy ch·ªânh
      newVersion = customVersion;
    } else {
      // Auto increment version
      const versionParts = currentVersion.split('.').map(v => parseInt(v));
      const [major, minor, patch] = versionParts;
      
      switch (versionType) {
        case 'major':
          newVersion = `${major + 1}.0.0`;
          break;
        case 'minor':
          newVersion = `${major}.${minor + 1}.0`;
          break;
        case 'patch':
        default:
          newVersion = `${major}.${minor}.${patch + 1}`;
          break;
      }
    }
    
    // C·∫≠p nh·∫≠t version trong app.json
    appJson.expo.version = newVersion;
    
    // Ghi l·∫°i file app.json
    fs.writeFileSync(appJsonPath, JSON.stringify(appJson, null, 2));
    
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t version: ${currentVersion} ‚Üí ${newVersion}`);
    
    // C≈©ng c·∫≠p nh·∫≠t version trong package.json n·∫øu c·∫ßn
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      packageJson.version = newVersion;
      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t version trong package.json: ${newVersion}`);
    }
    
    return newVersion;
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t version:', error.message);
    process.exit(1);
  }
};

// X·ª≠ l√Ω command line arguments
const args = process.argv.slice(2);
const versionType = args[0] || 'patch'; // patch, minor, major
const customVersion = args[1] || null;

if (require.main === module) {
  updateVersion(versionType, customVersion);
}

module.exports = { updateVersion }; 